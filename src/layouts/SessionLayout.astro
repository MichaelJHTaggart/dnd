---
import type { CollectionEntry } from 'astro:content';
import Layout from './Layout.astro';
import CharacterPortrait from '../components/CharacterPortrait.astro';
import SessionNavigation from '../components/SessionNavigation.astro';
import { getCollection } from 'astro:content';
import { formatDate } from '../utils/dateUtils';

interface Props {
  session: CollectionEntry<'sessions'>;
  campaign: CollectionEntry<'campaigns'>;
}

const { session, campaign } = Astro.props;

// Get all sessions for navigation
const allSessions = await getCollection('sessions');
---

<Layout title={session.data.title}>
  <main style={`background-color: ${campaign.data.backgroundColor || '#2a2a2a'}; color: ${campaign.data.textColor || '#ffffff'}`}>
    <div class="container">
      <nav class="breadcrumb">
        <a href={`/campaigns/${campaign.slug}`}>‚Üê Back to Campaign</a>
      </nav>
      
      <div class="session-layout">
        {campaign.data.players && campaign.data.players.length > 0 && (
          <aside class="left-portraits">
            {campaign.data.players.slice(0, Math.ceil(campaign.data.players.length / 2)).map(player => (
              <CharacterPortrait player={player} />
            ))}
          </aside>
        )}

        <article class="session-content">
          <header>
            <time datetime={session.data.date.toISOString()}>
              {formatDate(session.data.date)}
            </time>
            <h1>{session.data.title}</h1>
          </header>

          <slot />

          <SessionNavigation currentSession={session} allSessions={allSessions} />
        </article>

        {campaign.data.players && campaign.data.players.length > 0 && (
          <aside class="right-portraits">
            {campaign.data.players.slice(Math.ceil(campaign.data.players.length / 2)).map(player => (
              <CharacterPortrait player={player} />
            ))}
          </aside>
        )}
      </div>
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  .breadcrumb {
    margin-bottom: 2rem;
  }

  .breadcrumb a {
    color: inherit;
    text-decoration: none;
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .breadcrumb a:hover {
    opacity: 1;
  }

  .session-layout {
    display: grid;
    grid-template-columns: 250px 1fr 250px;
    gap: 2rem;
    align-items: start;
  }

  .session-content {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1rem;
    padding: 2rem;
    line-height: 1.8;
  }

  header {
    text-align: center;
    margin-bottom: 2rem;
  }

  time {
    font-size: 1.1rem;
    opacity: 0.8;
  }

  h1 {
    font-size: 2.5rem;
    margin: 1rem 0;
    background: linear-gradient(to right, #64b5f6, #2196f3);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .left-portraits, .right-portraits {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    position: sticky;
    top: 2rem;
  }

  @media (max-width: 1200px) {
    .session-layout {
      grid-template-columns: 1fr;
    }

    .left-portraits, .right-portraits {
      display: none;
    }
  }
</style>
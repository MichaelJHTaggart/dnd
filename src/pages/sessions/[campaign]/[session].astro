---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import SessionNavigation from '../../../components/SessionNavigation.astro';
import { formatDate } from '../../../utils/dateUtils';

export async function getStaticPaths() {
  const sessions = await getCollection('sessions');
  
  return sessions.map(session => ({
    params: { 
      campaign: session.data.campaign,
      session: session.slug
    },
    props: { session },
  }));
}

const { session } = Astro.props;
const { Content } = await session.render();

// Get the campaign data
const campaigns = await getCollection('campaigns');
const campaign = campaigns.find(c => c.slug === session.data.campaign);

if (!campaign) {
  throw new Error(`Campaign not found: ${session.data.campaign}`);
}

// Get all sessions for navigation
const allSessions = await getCollection('sessions');
---

<Layout title={session.data.title}>
  <main style={`background-color: ${campaign?.data.backgroundColor || '#2a2a2a'}; color: ${campaign?.data.textColor || '#ffffff'}`}>
    <div class="container">
      <nav class="breadcrumb">
        <a href={`/campaigns/${session.data.campaign}`}>‚Üê Back to Campaign</a>
      </nav>
      <article class="session-content">
        <header>
          <time datetime={session.data.date.toISOString()}>
            {formatDate(session.data.date)}
          </time>
          <h1>{session.data.title}</h1>
          {session.data.highlights && (
            <ul class="highlights">
              {session.data.highlights.map(highlight => (
                <li>{highlight}</li>
              ))}
            </ul>
          )}
        </header>
        <Content />
      </article>

      <SessionNavigation 
        currentSession={session}
        allSessions={allSessions}
      />
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .breadcrumb {
    margin-bottom: 2rem;
  }

  .breadcrumb a {
    color: inherit;
    text-decoration: none;
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .breadcrumb a:hover {
    opacity: 1;
  }

  .session-content {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1rem;
    padding: 2rem;
    line-height: 1.8;
  }

  header {
    margin-bottom: 3rem;
    text-align: center;
  }

  time {
    font-size: 1.1rem;
    opacity: 0.8;
  }

  h1 {
    font-size: 3rem;
    margin: 1rem 0 2rem;
    background: linear-gradient(to right, #64b5f6, #2196f3);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .highlights {
    list-style: none;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
  }

  .highlights li {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-size: 0.9rem;
  }

  :global(.session-content h2) {
    font-size: 1.8rem;
    margin: 2rem 0 1rem;
    color: #64b5f6;
  }

  :global(.session-content p) {
    margin: 1rem 0;
  }

  :global(.session-content ul, .session-content ol) {
    margin: 1rem 0;
    padding-left: 2rem;
  }

  :global(.session-content blockquote) {
    border-left: 3px solid #64b5f6;
    padding-left: 1rem;
    margin: 1rem 0;
    font-style: italic;
    opacity: 0.9;
  }
</style>